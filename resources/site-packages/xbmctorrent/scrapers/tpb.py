from xbmctorrent import plugin
import xbmc
from xbmctorrent.scrapers import scraper
from xbmctorrent.common import url_for_magnet, UA
from urlparse import urljoin
import urllib
from contextlib import closing
from BeautifulSoup import BeautifulSoup
import re

BASE_URL = "http://thepiratebay.sx/"

CATEGORIES = [
    ("Audio", 100, [
        ("Music", 101),
        ("Audio Books", 102),
        ("Sound clips", 103),
        ("FLAC", 104),
        ("Other", 199),
    ]),
    ("Video", 200, [
        ("Movies", 201),
        ("Movies DVDR", 202),
        ("Music videos", 203),
        ("Movie clips", 204),
        ("TV shows", 205),
        ("Handheld", 206),
        ("HD - Movies", 207),
        ("HD - TV shows", 208),
        ("3D", 209),
        ("Other", 299),
    ]),
    ("Porn", 500, [
        ("Movies", 501),
        ("Movies DVDR", 502),
        ("HD - Movies", 503),
        ("Movie clips", 504),
        ("Other", 599),
    ]),
]


def get_url(url):
    import urllib2
    req = urllib2.Request(url)
    req.add_header('User-Agent', UA)
    with closing(urllib2.urlopen(req)) as response:
        return response.read()


def parse_tpb_page(html_data):
    soup = BeautifulSoup(html_data)
    nodes = soup.findAll("div", "detName")

    for node in nodes:
        seeds, peers = map(lambda x: x.text, node.parent.parent.findAll("td")[2:])
        magnet_node = node.parent.findAll("a")[1]
        desc_node = node.parent.findAll("font", "detDesc")[0]
        size = re.search("Size (.*?),", desc_node.text).group(1)
        text = "%s (%s S:%s P:%s)" % (node.a.text, size.replace("&nbsp;", " "), seeds, peers)
        yield {
            "label": text,
            "path": url_for_magnet(magnet_node["href"]),
            "is_playable": True,
        }


@scraper("The Pirate Bay", "http://thepiratebay.sx/static/img/tpb.jpg")
@plugin.route("/tpb")
def piratebay_index():
    return [
        {"label": "Search", "path": plugin.url_for("piratebay_search"), "is_playable": False},
        {"label": "Browse Torrents", "path": plugin.url_for("piratebay_browse_categories"), "is_playable": False},
    ]


@plugin.route("/tpb/browse")
def piratebay_browse_categories():
    def make_cats(root, prefix=""):
        for cat in root:
            yield {
                "label": "%s%s" % (prefix, cat[0]),
                "path": plugin.url_for("piratebay_page", root="/browse/%d" % cat[1], page=0),
            }
            if len(cat) > 2:
                for entry in make_cats(cat[2], prefix="%s  " % prefix):
                    yield entry

    for cat in make_cats(CATEGORIES):
        yield cat


@plugin.route("/tpb/<root>/<page>")
def piratebay_page(root, page):
    page = int(page)
    html_data = get_url(urljoin(BASE_URL, "%s/%d/7/0" % (root, page)))
    soup = BeautifulSoup(html_data)
    nodes = soup.findAll("div", "detName")

    next_page = {
        "label": "Next page...",
        "path": plugin.url_for("piratebay_page", root=root, page=page + 1),
        "is_playable": False,
    }
    yield next_page
    for node in nodes:
        seeds, peers = map(lambda x: x.text, node.parent.parent.findAll("td")[2:])
        magnet_node = node.parent.findAll("a")[1]
        desc_node = node.parent.findAll("font", "detDesc")[0]
        size = re.search("Size (.*?),", desc_node.text).group(1)
        text = "%s (%s S:%s P:%s)" % (node.a.text, size.replace("&nbsp;", " "), seeds, peers)
        yield {
            "label": text,
            "path": url_for_magnet(magnet_node["href"]),
            "is_playable": True,
        }
    yield next_page


@plugin.route("/tpb/search")
def piratebay_search():
    kb = xbmc.Keyboard("", "Search")
    kb.doModal()
    if kb.isConfirmed():
        query = kb.getText()
    if query:
        for item in piratebay_page(root="/search/%s" % urllib.quote(query), page=0):
            yield item
