import sys
import xbmc
import requests
from functools import wraps
from xbmctorrent import plugin
from pyga.requests import Tracker, Page, Event, Session, Visitor, Config

GA = plugin.get_storage("analytics")
CONFIG = Config()
CONFIG.anonimize_ip_address = True
TRACKING_ID = "UA-40799149-3"
TRACKER = Tracker(TRACKING_ID, 'steeve.io', conf=CONFIG)

def get_platform():
    platforms = {
        "Linux": "X11; Linux",
        "Windows": "Windows NT %d.%d",
        "OSX": "Macintosh; Intel Mac OS X",
        "IOS": "iPad; CPU OS 6_1 like Mac OS X",
    }
    for platform, ua_platform_name in platforms.items():
        if xbmc.getCondVisibility("System.Platform.%s" % platform):
            if platform == "Windows":
                version = sys.getwindowsversion()
                ua_platform_name %= (version[0], version[1])
            return ua_platform_name

def get_user_agent():
    return "XBMC/%s (%s)" % (
        xbmc.getInfoLabel("System.BuildVersion").split(" ")[0],
        get_platform()
    )

def make_visitor():
    info = lambda x: xbmc.getInfoLabel("System.%s" % x)
    visitor = Visitor()
    visitor.user_agent = get_user_agent()
    visitor.locale = xbmc.getLanguage()
    visitor.screen_resolution = "%sx%s" % (info("ScreenWidth"), info("ScreenHeight"))
    return visitor

def ensure_screen_res(visitor):
    info = lambda x: xbmc.getInfoLabel("System.%s" % x)
    visitor.screen_resolution = "%sx%s" % (info("ScreenWidth"), info("ScreenHeight"))
    return visitor

VISITOR = ensure_screen_res(GA.setdefault("visitor", make_visitor()))
SESSION = GA.setdefault("session", Session())

def tracked(fn):
    @wraps(fn)
    def _fn(*args, **kwargs):
        ret = fn(*args, **kwargs)
        track_page(plugin.request.path)
        return ret
    return _fn

def track_page(path):
    if not plugin.get_setting("ga_disable", bool):
        plugin.log.info("Tracking %s" % path)
        TRACKER.track_pageview(Page(path), SESSION, VISITOR)

def track_event(*args, **kwargs):
    if not plugin.get_setting("ga_disable", bool):
        plugin.log.info("Tracking event %s" % repr(args))
        TRACKER.track_event(Event(*args, **kwargs), SESSION, VISITOR)
