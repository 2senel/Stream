import requests
import re
from xbmctorrent.utils import memoize, pool

API_KEY = "b91e899ce561dd19695340c3b26e0a02"
BASE_URL = "http://api.themoviedb.org/3"
POOL_SIZE = 5


session = requests.Session()
session.params.update({
    "api_key": API_KEY
})

import requests

requests.adapters.DEFAULT_RETRIES = 5

@memoize
def tmdb_config():
    return session.get("%s/configuration" % BASE_URL).json()


def image(rel_url, size="original"):
    return "%s/%s/%s" % (tmdb_config()["images"]["base_url"], size, rel_url)


def get(imdb_id):
    return session.get("%s/movie/%s" % (BASE_URL, imdb_id), timeout=20).json() or None


def get_list(imdb_ids, cb=None):
    f = get
    if cb:
        def _get_cb(*args, **kwargs):
            ret = get(*args, **kwargs)
            cb(ret)
            return ret
        f = _get_cb
    return pool().map(f, imdb_ids)


def search(query, **kwargs):
    kwargs["query"] = query
    return session.get("%s/search/movie" % BASE_URL, params=kwargs).json()


def search_list(queries, cb=None):
    f = search
    if cb:
        def _search_cb(*args, **kwargs):
            ret = search(*args, **kwargs)
            cb(ret)
            return ret
        f = _search_cb
    return pool().map(f, queries)


def get_list_item(meta):
    def img(key, size="original", default=""):
        return meta.get(key) and image(meta[key], size=size) or default
    def m(key, default=""):
        return meta.get(key) or default
    return {
        "label": m("title"),
        "icon": img("poster_path", size="w500"),
        "thumbnail": img("poster_path", size="w500"),
        "is_playable": True,
        "info": {
            "count": m("id"),
            "title": m("title"),
            "genre": meta.get("genres") and ", ".join([genre["name"] for genre in meta["genres"]]) or "",
            "plot": m("overview"),
            "plot_outline": m("overview"),
            "tagline": m("tagline"),
            "rating": m("vote_average"),
            "duration": m("runtime"),
            "code": m("imdb_id"),
            "year": meta.get("release_date") and meta["release_date"].split("-")[0] or "",
        },
        "properties": {
            "fanart_image": img("backdrop_path"),
        },
    }
