from contextlib import contextmanager

def memoize(f):
    """ Memoization decorator for a function taking one or more arguments. """
    class memodict(dict):
        def __getitem__(self, *key):
            return dict.__getitem__(self, key)

        def __missing__(self, key):
            ret = self[key] = f(*key)
            return ret

    return memodict().__getitem__


def first(iterable, default=None):
    if iterable:
        for item in iterable:
            return item
    return default


@contextmanager
def joining(thing, timeout=5):
    try:
        yield thing
    finally:
        thing.close()
        thing.join()


@contextmanager
def terminating(thing, timeout=5):
    try:
        yield thing
    finally:
        thing.close()
        thing.terminate()
        thing.join()


def get_quality_from_name(name):
    name = name.lower()
    stream_info = {}
    if "x264" in name:
        stream_info["codec"] = "h264"
    if "xvid" in name:
        stream_info["codec"] = "xvid"
    if "720p" in name:
        stream_info["width"] = 1280
        stream_info["height"] = 720
    if "1080p" in name:
        stream_info["width"] = 1920
        stream_info["height"] = 1080
    if stream_info.get("width") and stream_info.get("height"):
        stream_info["aspect"] = float(stream_info["width"]) / float(stream_info["height"])
    return stream_info


def url_get(url, params={}, headers={}):
    import urllib2
    from contextlib import closing
    from xbmctorrent.common import USER_AGENT
    if params:
        import urllib
        url = "%s?%s" % (url, urllib.urlencode(params))
    req = urllib2.Request(url)
    req.add_header("User-Agent", USER_AGENT)
    for k, v in headers.items():
        req.add_header(k, v)
    try:
        with closing(urllib2.urlopen(req)) as response:
            data = response.read()
            if response.headers.get("Content-Encoding", "") == "gzip":
                import zlib
                return zlib.decompressobj(16 + zlib.MAX_WBITS).decompress(data)
            return data
    except urllib2.HTTPError:
        return None


def url_get_json(*args, **kwargs):
    import json
    data = url_get(*args, **kwargs)
    if data:
        return json.loads(data)
