from multiprocessing.pool import ThreadPool

def memoize(f):
    """ Memoization decorator for a function taking one or more arguments. """
    class memodict(dict):
        def __getitem__(self, *key):
            return dict.__getitem__(self, key)

        def __missing__(self, key):
            ret = self[key] = f(*key)
            return ret

    return memodict().__getitem__


DEFAULT_POOL_SIZE = 10
@memoize
def pool(size=DEFAULT_POOL_SIZE):
    return ThreadPool(size)


def first(iterable, default=None):
    if iterable:
        for item in iterable:
            return item
    return default
